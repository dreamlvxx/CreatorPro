plugins {
    id 'com.android.application'
    id 'kotlin-android'
}
apply plugin: 'jacoco'//添加插件jacoco
apply from: 'git-info.gradle'
apply from: 'git-pro.gradle'

jacoco {
    toolVersion = "0.8.6"//声明jacoco的版本号
}

android {
    compileSdkVersion rootProject.compileSdkVersionX
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "com.dream.create"
        minSdkVersion rootProject.minSdkVersionX
        targetSdkVersion rootProject.targetSdkVersionX
        versionCode "${versionMajorCode}".toInteger()
        versionName "${versionMajorName}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug{
            testCoverageEnabled = true//设置为true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix "_d_$project.ext.commitId"
        }
        release {
            testCoverageEnabled = true//设置为true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            versionNameSuffix "_r_$project.ext.commitId"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        viewBinding = true
    }

    buildFeatures {
        compose = true
    }

    composeOptions {
        kotlinCompilerVersion = "1.4.32"
        kotlinCompilerExtensionVersion = "1.0.0-beta07"
    }

    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'androidx.recyclerview:recyclerview:1.2.0'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.50'
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.4-7'
    implementation 'com.scwang.smartrefresh:SmartRefreshHeader:1.0.4-7'//没有使用特殊Header，可以不加这行
    implementation 'com.google.code.gson:gson:2.8.6'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

    implementation 'com.squareup.okhttp3:okhttp:4.8.0'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    debugImplementation 'com.facebook.flipper:flipper:0.84.0'
    debugImplementation 'com.facebook.soloader:soloader:0.10.1'
    debugImplementation 'com.facebook.flipper:flipper-leakcanary2-plugin:0.84.0'

    implementation "androidx.work:work-runtime:2.4.0"
    androidTestImplementation "androidx.work:work-testing:2.4.0"
    implementation 'androidx.activity:activity:1.2.2'
    implementation 'androidx.fragment:fragment:1.3.2'

    implementation 'org.jacoco:org.jacoco.core:0.8.6'//导入jacoco的版本包

    def androix_core_version = '1.6.0-alpha02'
    def lifecycle_version = "2.3.1"
    //ktx https://developer.android.google.cn/kotlin/ktx/extensions-list
    api "androidx.core:core:$androix_core_version"
    api "androidx.core:core-ktx:$androix_core_version"

    api "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-livedata-core-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"

    //compose
    implementation("androidx.compose.ui:ui:1.0.0-beta07")
    // Tooling support (Previews, etc.)
    implementation("androidx.compose.ui:ui-tooling:1.0.0-beta07")
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation("androidx.compose.foundation:foundation:1.0.0-beta07")
    // Material Design
    implementation("androidx.compose.material:material:1.0.0-beta07")
    // Material design icons
    implementation("androidx.compose.material:material-icons-core:1.0.0-beta07")
    implementation("androidx.compose.material:material-icons-extended:1.0.0-beta07")
    // Integration with observables
    implementation("androidx.compose.runtime:runtime-livedata:1.0.0-beta07")
    implementation("androidx.compose.runtime:runtime-rxjava2:1.0.0-beta07")
    // UI Tests
    androidTestImplementation("androidx.compose.ui:ui-test-junit4:1.0.0-beta07")
    implementation("androidx.activity:activity-compose:1.3.0-alpha06")
}

def coverageSourceDirs = ['src/main/java']
//JacocoReport的复制任务
task jacocoTestDiffReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "XXReporting"

    description = "Generate Jacoco coverage reports"

    classDirectories.from = fileTree(dir: '../app/build/intermediates/app_classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*'])


    additionalSourceDirs.from = files(coverageSourceDirs)
    sourceDirectories.from = files(coverageSourceDirs)
    executionData.from = files('../app/build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
//    afterEvaluate {
//        jacocoTestReport {
//            classDirectories.from = files(classDirectories.files.collect {
//                fileTree(dir:'../app',
//                        exclude: [
//                                '**/*$*.*',
//                        ])
//            })
//        }
//    }
}

jacocoTestDiffReport.doFirst {
    println 'start generate report'
}

jacocoTestDiffReport.doLast {
    println 'end report'
}

